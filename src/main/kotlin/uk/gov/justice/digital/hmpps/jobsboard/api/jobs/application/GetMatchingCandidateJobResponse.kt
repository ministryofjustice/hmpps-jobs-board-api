package uk.gov.justice.digital.hmpps.jobsboard.api.jobs.application

import uk.gov.justice.digital.hmpps.jobsboard.api.jobs.domain.Job
import java.time.Instant
import java.time.LocalDate

data class GetMatchingCandidateJobResponse(
  val id: String,
  val employerName: String,
  val jobTitle: String,
  val closingDate: String?,
  val startDate: String?,
  val postcode: String,
  val distance: Float?,
  val sector: String,
  val salaryFrom: Float,
  val salaryTo: Float?,
  val salaryPeriod: String,
  val additionalSalaryInformation: String?,
  val workPattern: String,
  val hoursPerWeek: String,
  val contractType: String,
  val offenceExclusions: List<String>,
  val offenceExclusionsDetails: String?,
  val essentialCriteria: String,
  val desirableCriteria: String?,
  val description: String,
  val howToApply: String,
  val expressionOfInterest: Boolean,
  val archived: Boolean,
  val createdAt: String,
) {
  constructor(
    id: String,
    employerName: String,
    jobTitle: String,
    closingDate: LocalDate?,
    startDate: LocalDate?,
    postcode: String,
    distance: Float?,
    sector: String,
    salaryFrom: Float,
    salaryTo: Float?,
    salaryPeriod: String,
    additionalSalaryInformation: String?,
    workPattern: String,
    hoursPerWeek: String,
    contractType: String,
    offenceExclusions: String,
    offenceExclusionsDetails: String?,
    essentialCriteria: String,
    desirableCriteria: String?,
    description: String,
    howToApply: String,
    expressionOfInterest: Boolean,
    archived: Boolean,
    createdAt: Instant?,
  ) : this(
    id,
    employerName,
    jobTitle,
    closingDate?.toString(),
    startDate?.toString(),
    postcode,
    distance,
    sector,
    salaryFrom,
    salaryTo,
    salaryPeriod,
    additionalSalaryInformation,
    workPattern,
    hoursPerWeek,
    contractType,
    offenceExclusions.split(","),
    offenceExclusionsDetails,
    essentialCriteria,
    desirableCriteria,
    description,
    howToApply,
    expressionOfInterest,
    archived,
    createdAt.toString(),
  ) {
  }

  companion object {
    fun from(
      job: Job,
      expressionOfInterest: Boolean = false,
      archived: Boolean = false,
    ) = GetMatchingCandidateJobResponse(
      id = job.id.id,
      employerName = job.employer.name,
      jobTitle = job.title,
      closingDate = job.closingDate?.toString(),
      startDate = job.startDate?.toString(),
      postcode = job.postcode,
      distance = null,
      sector = job.sector,
      salaryFrom = job.salaryFrom,
      salaryTo = job.salaryTo,
      salaryPeriod = job.salaryPeriod,
      additionalSalaryInformation = job.additionalSalaryInformation,
      workPattern = job.workPattern,
      hoursPerWeek = job.hoursPerWeek,
      contractType = job.contractType,
      offenceExclusions = job.offenceExclusions.split(","),
      offenceExclusionsDetails = job.offenceExclusionsDetails,
      essentialCriteria = job.essentialCriteria,
      desirableCriteria = job.desirableCriteria,
      description = job.description,
      howToApply = job.howToApply,
      expressionOfInterest = expressionOfInterest,
      archived = archived,
      createdAt = job.createdAt.toString(),
    )
  }
}
